model Follow {
  followerId String
  followeeId String
  follower   User     @relation("follower", fields: [followerId], references: [username], onDelete: Cascade)
  followee   User     @relation("followee", fields: [followeeId], references: [username], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([followerId, followeeId])
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  name      String?
  username  String? @unique
  avatarUrl String?
  bannerUrl String?
  password  String

  followers Follow[] @relation("follower")
  followees Follow[] @relation("followee")

  channelFollowees  ChannelFollow[] @relation("channelFollowee")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at") @updatedAt

  notes Note[]
  reactions Reactions[]

  host     String
  instance Instance @relation(fields: [host], references: [host])
}
